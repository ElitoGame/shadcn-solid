import fs from "fs";
import { join } from "path";
import { rimraf } from "rimraf";

const folderPath = "./src/contents/docs";

const generateContentsArray = (folderPath: string): { component: string }[] => {
  const contentsArray: { component: string }[] = [];

  fs.readdirSync(folderPath).forEach(file => {
    const filePath = join(folderPath, file);

    if (fs.statSync(filePath).isDirectory()) {
      const subdirectoryContents = generateContentsArray(filePath);
      contentsArray.push(...subdirectoryContents);
    } else {
      if (file.endsWith(".mdx")) {
        const componentPath = filePath.replace(/src/g, "@").replace(/\\/g, "/");
        contentsArray.push({ component: componentPath });
      }
    }
  });

  return contentsArray;
};

const contentsArray = generateContentsArray(folderPath);

const generateRouteKey = (filePath: string): string =>
  `/${filePath
    .replace(/\/index\.mdx$/, "")
    .replace(/@\/contents\//, "")
    .replace(/\.mdx$/, "")}`;

const formattedContents = contentsArray
  .map(
    item =>
      `  "${generateRouteKey(item.component)}": {\n    component: lazy(() => import("${
        item.component
      }"))\n  },`
  )
  .join("\n");

const fileContent = `// @ts-nocheck
// This file is autogenerated by scripts/build-contents.ts
// Do not edit this file directly.
import type { Component } from "solid-js";
import { lazy } from "solid-js";

export const Contents : Record<string, Record<"component", Component<unknown>>> = {\n${formattedContents}\n};`;

rimraf.sync(join(process.cwd(), "src/contents/index.ts"));
fs.writeFileSync(join(process.cwd(), "src/contents/index.ts"), fileContent);

console.log("âœ… Done!");
