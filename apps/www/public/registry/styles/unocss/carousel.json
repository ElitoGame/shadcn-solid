{
  "name": "carousel",
  "dependencies": ["embla-carousel-solid"],
  "files": [
    {
      "name": "carousel.tsx",
      "content": "import { cn } from \"@/libs/cn\";\r\nimport type { CreateEmblaCarouselType } from \"embla-carousel-solid\";\r\nimport createEmblaCarousel from \"embla-carousel-solid\";\r\n\r\nimport type { Accessor, ComponentProps, ParentProps, VoidProps } from \"solid-js\";\r\nimport {\r\n  createContext,\r\n  createEffect,\r\n  createMemo,\r\n  createSignal,\r\n  mergeProps,\r\n  splitProps,\r\n  useContext\r\n} from \"solid-js\";\r\nimport { Button } from \"./button\";\r\n\r\nexport type CarouselApi = CreateEmblaCarouselType[1];\r\ntype UseCarouselParameters = Parameters<typeof createEmblaCarousel>;\r\ntype CarouselOptions = NonNullable<UseCarouselParameters[0]>;\r\ntype CarouselPlugin = NonNullable<UseCarouselParameters[1]>;\r\n\r\ntype CarouselProps = {\r\n  opts?: ReturnType<CarouselOptions>;\r\n  plugins?: ReturnType<CarouselPlugin>;\r\n  orientation?: \"horizontal\" | \"vertical\";\r\n  setApi?: (api: CarouselApi) => void;\r\n};\r\n\r\ntype CarouselContextProps = {\r\n  carouselRef: ReturnType<typeof createEmblaCarousel>[0];\r\n  api: ReturnType<typeof createEmblaCarousel>[1];\r\n  scrollPrev: () => void;\r\n  scrollNext: () => void;\r\n  canScrollPrev: Accessor<boolean>;\r\n  canScrollNext: Accessor<boolean>;\r\n} & CarouselProps;\r\n\r\nconst CarouselContext = createContext<Accessor<CarouselContextProps> | null>(null);\r\n\r\nconst useCarousel = () => {\r\n  const context = useContext(CarouselContext);\r\n\r\n  if (!context) {\r\n    throw new Error(\"useCarousel must be used within a <Carousel />\");\r\n  }\r\n\r\n  return context();\r\n};\r\n\r\nexport const Carousel = (props: ComponentProps<\"div\"> & CarouselProps) => {\r\n  const merge = mergeProps<ParentProps<ComponentProps<\"div\"> & CarouselProps>[]>(\r\n    { orientation: \"horizontal\" },\r\n    props\r\n  );\r\n\r\n  const [local, rest] = splitProps(merge, [\r\n    \"orientation\",\r\n    \"opts\",\r\n    \"setApi\",\r\n    \"plugins\",\r\n    \"class\",\r\n    \"children\"\r\n  ]);\r\n\r\n  const [carouselRef, api] = createEmblaCarousel(\r\n    () => ({\r\n      ...local.opts,\r\n      axis: local.orientation === \"horizontal\" ? \"x\" : \"y\"\r\n    }),\r\n    () => (local.plugins === undefined ? [] : local.plugins)\r\n  );\r\n  const [canScrollPrev, setCanScrollPrev] = createSignal(false);\r\n  const [canScrollNext, setCanScrollNext] = createSignal(false);\r\n\r\n  const onSelect = (api: NonNullable<ReturnType<CarouselApi>>) => {\r\n    setCanScrollPrev(api.canScrollPrev());\r\n    setCanScrollNext(api.canScrollNext());\r\n  };\r\n\r\n  const scrollPrev = () => {\r\n    api()?.scrollPrev();\r\n  };\r\n\r\n  const scrollNext = () => {\r\n    api()?.scrollNext();\r\n  };\r\n\r\n  const handleKeyDown = (event: KeyboardEvent) => {\r\n    if (event.key === \"ArrowLeft\") {\r\n      event.preventDefault();\r\n      scrollPrev();\r\n    } else if (event.key === \"ArrowRight\") {\r\n      event.preventDefault();\r\n      scrollNext();\r\n    }\r\n  };\r\n\r\n  createEffect(() => {\r\n    if (!api() || !local.setApi) {\r\n      return;\r\n    }\r\n\r\n    local.setApi(api);\r\n  });\r\n\r\n  createEffect(() => {\r\n    if (!api()) {\r\n      return;\r\n    }\r\n\r\n    onSelect(api()!);\r\n    api()!.on(\"reInit\", onSelect);\r\n    api()!.on(\"select\", onSelect);\r\n\r\n    return () => {\r\n      api()?.off(\"select\", onSelect);\r\n    };\r\n  });\r\n\r\n  const value = createMemo(\r\n    () =>\r\n      ({\r\n        carouselRef,\r\n        api,\r\n        opts: local.opts,\r\n        orientation: local.orientation || (local.opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\r\n        scrollPrev,\r\n        scrollNext,\r\n        canScrollPrev,\r\n        canScrollNext\r\n      }) satisfies CarouselContextProps\r\n  );\r\n\r\n  return (\r\n    <CarouselContext.Provider value={value}>\r\n      <div\r\n        onKeyDown={handleKeyDown}\r\n        class={cn(\"relative\", local.class)}\r\n        role=\"region\"\r\n        aria-roledescription=\"carousel\"\r\n        {...rest}\r\n      >\r\n        {local.children}\r\n      </div>\r\n    </CarouselContext.Provider>\r\n  );\r\n};\r\n\r\nexport const CarouselContent = (props: ComponentProps<\"div\">) => {\r\n  const [local, rest] = splitProps(props, [\"class\"]);\r\n  const { carouselRef, orientation } = useCarousel();\r\n\r\n  return (\r\n    <div ref={carouselRef} class=\"overflow-hidden\">\r\n      <div\r\n        class={cn(\"flex\", orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\", local.class)}\r\n        {...rest}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const CarouselItem = (props: ComponentProps<\"div\">) => {\r\n  const [local, rest] = splitProps(props, [\"class\"]);\r\n  const { orientation } = useCarousel();\r\n\r\n  return (\r\n    <div\r\n      role=\"group\"\r\n      aria-roledescription=\"slide\"\r\n      class={cn(\r\n        \"min-w-0 shrink-0 grow-0 basis-full\",\r\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\r\n        local.class\r\n      )}\r\n      {...rest}\r\n    />\r\n  );\r\n};\r\n\r\nexport const CarouselPrevious = (props: VoidProps<ComponentProps<typeof Button>>) => {\r\n  const merge = mergeProps<VoidProps<ComponentProps<typeof Button>[]>>(\r\n    { variant: \"outline\", size: \"icon\" },\r\n    props\r\n  );\r\n  const [local, rest] = splitProps(merge, [\"class\", \"variant\", \"size\"]);\r\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel();\r\n\r\n  return (\r\n    <Button\r\n      variant={local.variant}\r\n      size={local.size}\r\n      class={cn(\r\n        \"absolute  h-8 w-8 rounded-full\",\r\n        orientation === \"horizontal\"\r\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\r\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\r\n        local.class\r\n      )}\r\n      disabled={!canScrollPrev()}\r\n      onClick={scrollPrev}\r\n      {...rest}\r\n    >\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"h-4 w-4\">\r\n        <path\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          stroke-linecap=\"round\"\r\n          stroke-linejoin=\"round\"\r\n          stroke-width=\"2\"\r\n          d=\"M5 12h14M5 12l6 6m-6-6l6-6\"\r\n        />\r\n      </svg>\r\n      <span class=\"sr-only\">Previous slide</span>\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport const CarouselNext = (props: VoidProps<ComponentProps<typeof Button>>) => {\r\n  const merge = mergeProps<VoidProps<ComponentProps<typeof Button>[]>>(\r\n    { variant: \"outline\", size: \"icon\" },\r\n    props\r\n  );\r\n  const [local, rest] = splitProps(merge, [\"class\", \"variant\", \"size\"]);\r\n  const { orientation, scrollNext, canScrollNext } = useCarousel();\r\n\r\n  return (\r\n    <Button\r\n      variant={local.variant}\r\n      size={local.size}\r\n      class={cn(\r\n        \"absolute h-8 w-8 rounded-full\",\r\n        orientation === \"horizontal\"\r\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\r\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\r\n        local.class\r\n      )}\r\n      disabled={!canScrollNext()}\r\n      onClick={scrollNext}\r\n      {...rest}\r\n    >\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"h-4 h-4\">\r\n        <path\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          stroke-linecap=\"round\"\r\n          stroke-linejoin=\"round\"\r\n          stroke-width=\"2\"\r\n          d=\"M5 12h14m-4 4l4-4m-4-4l4 4\"\r\n        />\r\n      </svg>\r\n      <span class=\"sr-only\">Next slide</span>\r\n    </Button>\r\n  );\r\n};\r\n"
    }
  ],
  "type": "components:ui"
}
