{
  "name": "tabs",
  "dependencies": [
    "@kobalte/core"
  ],
  "files": [
    {
      "name": "tabs.tsx",
      "content": "import { cn } from \"@/libs/cn\";\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\";\nimport type {\n  TabsContentProps,\n  TabsIndicatorProps,\n  TabsListProps,\n  TabsRootProps,\n  TabsTriggerProps\n} from \"@kobalte/core/tabs\";\nimport { Tabs as TabsPrimitive } from \"@kobalte/core/tabs\";\nimport type { VariantProps } from \"class-variance-authority\";\nimport { cva } from \"class-variance-authority\";\nimport type { ValidComponent, VoidProps } from \"solid-js\";\nimport { splitProps } from \"solid-js\";\n\ntype tabsProps<T extends ValidComponent = \"div\"> = TabsRootProps<T> & {\n  class?: string;\n};\n\nexport const Tabs = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, tabsProps<T>>\n) => {\n  const [local, rest] = splitProps(props as tabsProps, [\"class\"]);\n\n  return (\n    <TabsPrimitive class={cn(\"w-full data-[orientation=vertical]:flex\", local.class)} {...rest} />\n  );\n};\n\ntype tabsListProps<T extends ValidComponent = \"div\"> = TabsListProps<T> & {\n  class?: string;\n};\n\nexport const TabsList = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, tabsListProps<T>>\n) => {\n  const [local, rest] = splitProps(props as tabsListProps, [\"class\"]);\n\n  return (\n    <TabsPrimitive.List\n      class={cn(\n        \"relative flex w-full rounded-lg bg-muted p-1 text-muted-foreground data-[orientation=vertical]:flex-col data-[orientation=horizontal]:items-center data-[orientation=vertical]:items-stretch\",\n        local.class\n      )}\n      {...rest}\n    />\n  );\n};\n\ntype tabsContentProps<T extends ValidComponent = \"div\"> = TabsContentProps<T> & {\n  class?: string;\n};\n\nexport const TabsContent = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, tabsContentProps<T>>\n) => {\n  const [local, rest] = splitProps(props as tabsContentProps, [\"class\"]);\n\n  return (\n    <TabsPrimitive.Content\n      class={cn(\n        \"transition-shadow duration-200 focus-visible:outline-none focus-visible:ring-[1.5px] focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background data-[orientation=horizontal]:mt-2 data-[orientation=vertical]:ml-2\",\n        local.class\n      )}\n      {...rest}\n    />\n  );\n};\n\ntype tabsTriggerProps<T extends ValidComponent = \"button\"> = TabsTriggerProps<T> & {\n  class?: string;\n};\n\nexport const TabsTrigger = <T extends ValidComponent = \"button\">(\n  props: PolymorphicProps<T, tabsTriggerProps<T>>\n) => {\n  const [local, rest] = splitProps(props as tabsTriggerProps, [\"class\"]);\n\n  return (\n    <TabsPrimitive.Trigger\n      class={cn(\n        \"peer relative z-10 inline-flex h-7 w-full items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium outline-none transition-colors disabled:pointer-events-none disabled:opacity-50 data-[selected]:text-foreground\",\n        local.class\n      )}\n      {...rest}\n    />\n  );\n};\n\nconst tabsIndicatorVariants = cva(\n  \"absolute transition-[transform,box-shadow] duration-200 outline-none\",\n  {\n    variants: {\n      variant: {\n        block:\n          \"data-[orientation=horizontal]:bottom-1 data-[orientation=horizontal]:left-0 data-[orientation=vertical]:right-1 data-[orientation=vertical]:top-0 data-[orientation=horizontal]:h-[calc(100%-0.5rem)] data-[orientation=vertical]:w-[calc(100%-0.5rem)] bg-background shadow rounded-md peer-focus-visible:ring-[1.5px] peer-focus-visible:ring-ring peer-focus-visible:ring-offset-2 peer-focus-visible:ring-offset-background peer-focus-visible:outline-none\",\n        underline:\n          \"data-[orientation=horizontal]:-bottom-[1px] data-[orientation=horizontal]:left-0 data-[orientation=vertical]:-right-[1px] data-[orientation=vertical]:top-0 data-[orientation=horizontal]:h-[2px] data-[orientation=vertical]:w-[2px] bg-primary\"\n      }\n    },\n    defaultVariants: {\n      variant: \"block\"\n    }\n  }\n);\n\ntype tabsIndicatorProps<T extends ValidComponent = \"div\"> = VoidProps<\n  TabsIndicatorProps<T> &\n    VariantProps<typeof tabsIndicatorVariants> & {\n      class?: string;\n    }\n>;\n\nexport const TabsIndicator = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, tabsIndicatorProps<T>>\n) => {\n  const [local, rest] = splitProps(props as tabsIndicatorProps, [\"class\", \"variant\"]);\n\n  return (\n    <TabsPrimitive.Indicator\n      class={cn(tabsIndicatorVariants({ variant: local.variant }), local.class)}\n      {...rest}\n    />\n  );\n};\n"
    }
  ],
  "type": "components:ui"
}