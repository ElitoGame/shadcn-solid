{
  "name": "pagination",
  "dependencies": [
    "@kobalte/core"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "name": "pagination.tsx",
      "content": "import { cn } from \"@/libs/cn\";\r\nimport * as PaginationPrimitive from \"@kobalte/core/pagination\";\r\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\";\r\nimport type { VariantProps } from \"class-variance-authority\";\r\nimport type { ValidComponent, VoidProps } from \"solid-js\";\r\nimport { mergeProps, splitProps } from \"solid-js\";\r\nimport { buttonVariants } from \"./button\";\r\n\r\nexport const PaginationItems = PaginationPrimitive.Items;\r\n\r\ntype PaginationProps = PaginationPrimitive.PaginationRootProps & {\r\n  class?: string;\r\n};\r\n\r\nexport const Pagination = <T extends ValidComponent = \"nav\">(\r\n  props: PolymorphicProps<T, PaginationProps>\r\n) => {\r\n  const [local, rest] = splitProps(props as PaginationProps, [\"class\"]);\r\n\r\n  return (\r\n    <PaginationPrimitive.Root\r\n      class={cn(\r\n        \"mx-auto flex w-full justify-center [&>ul]:(flex flex-row items-center gap-1)\",\r\n        local.class\r\n      )}\r\n      {...rest}\r\n    />\r\n  );\r\n};\r\n\r\ntype PaginationItemProps = PaginationPrimitive.PaginationItemProps &\r\n  Pick<VariantProps<typeof buttonVariants>, \"size\"> & {\r\n    class?: string;\r\n  };\r\n\r\nexport const PaginationItem = <T extends ValidComponent = \"button\">(\r\n  props: PolymorphicProps<T, PaginationItemProps>\r\n) => {\r\n  const merge = mergeProps({ size: \"icon\" }, props);\r\n  const [local, rest] = splitProps(merge, [\"class\", \"size\"]);\r\n\r\n  return (\r\n    <PaginationPrimitive.Item\r\n      class={cn(\r\n        buttonVariants({\r\n          variant: \"ghost\",\r\n          size: local.size\r\n        }),\r\n        \"aria-[current=page]:(border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground)\",\r\n        local.class\r\n      )}\r\n      {...rest}\r\n    />\r\n  );\r\n};\r\n\r\ntype PaginationEllipsisProps = VoidProps<\r\n  PaginationPrimitive.PaginationEllipsisProps & {\r\n    class?: string;\r\n  }\r\n>;\r\n\r\nexport const PaginationEllipsis = <T extends ValidComponent = \"div\">(\r\n  props: PolymorphicProps<T, PaginationEllipsisProps>\r\n) => {\r\n  const [local, rest] = splitProps(props as PaginationEllipsisProps, [\"class\"]);\r\n\r\n  return (\r\n    <PaginationPrimitive.Ellipsis\r\n      class={cn(\"flex h-9 w-9 items-center justify-center\", local.class)}\r\n      {...rest}\r\n    >\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"h-4 w-4\">\r\n        <path\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          stroke-linecap=\"round\"\r\n          stroke-linejoin=\"round\"\r\n          stroke-width=\"2\"\r\n          d=\"M4 12a1 1 0 1 0 2 0a1 1 0 1 0-2 0m7 0a1 1 0 1 0 2 0a1 1 0 1 0-2 0m7 0a1 1 0 1 0 2 0a1 1 0 1 0-2 0\"\r\n        />\r\n      </svg>\r\n      <span class=\"sr-only\">More pages</span>\r\n    </PaginationPrimitive.Ellipsis>\r\n  );\r\n};\r\n\r\ntype PaginationPreviousProps = PaginationPrimitive.PaginationPreviousProps &\r\n  Pick<VariantProps<typeof buttonVariants>, \"size\"> & {\r\n    class?: string;\r\n  };\r\n\r\nexport const PaginationPrevious = <T extends ValidComponent = \"button\">(\r\n  props: PolymorphicProps<T, PaginationPreviousProps>\r\n) => {\r\n  const merge = mergeProps({ size: \"icon\" }, props);\r\n  const [local, rest] = splitProps(merge, [\"class\", \"size\"]);\r\n\r\n  return (\r\n    <PaginationPrimitive.Previous\r\n      class={cn(\r\n        buttonVariants({\r\n          variant: \"ghost\",\r\n          size: local.size\r\n        }),\r\n        \"aria-[current=page]:(border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground)\",\r\n        local.class\r\n      )}\r\n      {...rest}\r\n    >\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"h-4 w-4\">\r\n        <path\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          stroke-linecap=\"round\"\r\n          stroke-linejoin=\"round\"\r\n          stroke-width=\"2\"\r\n          d=\"m15 6l-6 6l6 6\"\r\n        />\r\n      </svg>\r\n    </PaginationPrimitive.Previous>\r\n  );\r\n};\r\n\r\ntype PaginationNextProps = PaginationPrimitive.PaginationNextProps &\r\n  Pick<VariantProps<typeof buttonVariants>, \"size\"> & {\r\n    class?: string;\r\n  };\r\n\r\nexport const PaginationNext = <T extends ValidComponent = \"button\">(\r\n  props: PolymorphicProps<T, PaginationNextProps>\r\n) => {\r\n  const merge = mergeProps({ size: \"icon\" }, props);\r\n  const [local, rest] = splitProps(merge, [\"class\", \"size\"]);\r\n\r\n  return (\r\n    <PaginationPrimitive.Next\r\n      class={cn(\r\n        buttonVariants({\r\n          variant: \"ghost\",\r\n          size: local.size\r\n        }),\r\n        \"aria-[current=page]:(border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground)\",\r\n        local.class\r\n      )}\r\n      {...rest}\r\n    >\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-4 w-4\" viewBox=\"0 0 24 24\">\r\n        <path\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          stroke-linecap=\"round\"\r\n          stroke-linejoin=\"round\"\r\n          stroke-width=\"2\"\r\n          d=\"m9 6l6 6l-6 6\"\r\n        />\r\n      </svg>\r\n    </PaginationPrimitive.Next>\r\n  );\r\n};\r\n"
    }
  ],
  "type": "components:ui"
}