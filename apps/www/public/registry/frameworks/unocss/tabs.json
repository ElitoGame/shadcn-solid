{
  "name": "tabs",
  "dependencies": [
    "@kobalte/core"
  ],
  "files": [
    {
      "name": "tabs.tsx",
      "content": "import { cn } from \"@/libs/cn\";\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\";\nimport type {\n  TabsContentProps,\n  TabsIndicatorProps,\n  TabsListProps,\n  TabsRootProps,\n  TabsTriggerProps\n} from \"@kobalte/core/tabs\";\nimport { Tabs as TabsPrimitive } from \"@kobalte/core/tabs\";\nimport type { VariantProps } from \"class-variance-authority\";\nimport { cva } from \"class-variance-authority\";\nimport type { ValidComponent, VoidProps } from \"solid-js\";\nimport { splitProps } from \"solid-js\";\n\ntype tabsProps<T extends ValidComponent = \"div\"> = TabsRootProps<T> & {\n  class?: string;\n};\n\nexport const Tabs = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, tabsProps<T>>\n) => {\n  const [local, rest] = splitProps(props as tabsProps, [\"class\"]);\n\n  return (\n    <TabsPrimitive class={cn(\"w-full data-[orientation=vertical]:flex\", local.class)} {...rest} />\n  );\n};\n\ntype tabsListProps<T extends ValidComponent = \"div\"> = TabsListProps<T> & {\n  class?: string;\n};\n\nexport const TabsList = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, tabsListProps<T>>\n) => {\n  const [local, rest] = splitProps(props as tabsListProps, [\"class\"]);\n\n  return (\n    <TabsPrimitive.List\n      class={cn(\n        \"relative flex rounded-lg bg-muted p-1 text-muted-foreground data-[orientation=vertical]:(flex-col items-stretch) data-[orientation=horizontal]:items-center w-full\",\n        local.class\n      )}\n      {...rest}\n    />\n  );\n};\n\ntype tabsContentProps<T extends ValidComponent = \"div\"> = TabsContentProps<T> & {\n  class?: string;\n};\n\nexport const TabsContent = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, tabsContentProps<T>>\n) => {\n  const [local, rest] = splitProps(props as tabsContentProps, [\"class\"]);\n\n  return (\n    <TabsPrimitive.Content\n      class={cn(\n        \"data-[orientation=vertical]:ml-2 data-[orientation=horizontal]:mt-2 transition-shadow duration-200 focus-visible:(ring-offset-background outline-none ring-1.5 ring-ring ring-offset-2)\",\n        local.class\n      )}\n      {...rest}\n    />\n  );\n};\n\ntype tabsTriggerProps<T extends ValidComponent = \"button\"> = TabsTriggerProps<T> & {\n  class?: string;\n};\n\nexport const TabsTrigger = <T extends ValidComponent = \"button\">(\n  props: PolymorphicProps<T, tabsTriggerProps<T>>\n) => {\n  const [local, rest] = splitProps(props as tabsTriggerProps, [\"class\"]);\n\n  return (\n    <TabsPrimitive.Trigger\n      class={cn(\n        \"w-full relative z-10 inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium transition-colors disabled:(pointer-events-none opacity-50) data-[selected]:text-foreground peer h-7 outline-none\",\n        local.class\n      )}\n      {...rest}\n    />\n  );\n};\n\nconst tabsIndicatorVariants = cva(\n  \"absolute transition-all transition-property-[box-shadow,transform] duration-200 outline-none\",\n  {\n    variants: {\n      variant: {\n        block:\n          \"data-[orientation=horizontal]:(bottom-1 left-0 h-[calc(100%-0.5rem)]) data-[orientation=vertical]:(right-1 top-0 w-[calc(100%-0.5rem)]) bg-background shadow rounded-md peer-focus-visible:(ring-1.5 ring-ring ring-offset-2 ring-offset-background outline-none)\",\n        underline:\n          \"data-[orientation=horizontal]:(-bottom-[1px] left-0 h-2px) data-[orientation=vertical]:(-right-[1px] top-0 w-2px) bg-primary\"\n      }\n    },\n    defaultVariants: {\n      variant: \"block\"\n    }\n  }\n);\n\ntype tabsIndicatorProps<T extends ValidComponent = \"div\"> = VoidProps<\n  TabsIndicatorProps<T> &\n    VariantProps<typeof tabsIndicatorVariants> & {\n      class?: string;\n    }\n>;\n\nexport const TabsIndicator = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, tabsIndicatorProps<T>>\n) => {\n  const [local, rest] = splitProps(props as tabsIndicatorProps, [\"class\", \"variant\"]);\n\n  return (\n    <TabsPrimitive.Indicator\n      class={cn(tabsIndicatorVariants({ variant: local.variant }), local.class)}\n      {...rest}\n    />\n  );\n};\n"
    }
  ],
  "type": "components:ui"
}