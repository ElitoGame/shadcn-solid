{
  "name": "textfield",
  "dependencies": [
    "@kobalte/core"
  ],
  "files": [
    {
      "name": "textfield.tsx",
      "content": "import { cn } from \"@/libs/cn\";\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\";\nimport * as TextFieldPrimitive from \"@kobalte/core/text-field\";\nimport { cva } from \"class-variance-authority\";\nimport type { ValidComponent, VoidProps } from \"solid-js\";\nimport { splitProps } from \"solid-js\";\n\ntype TextFieldProps = TextFieldPrimitive.TextFieldRootProps & {\n  class?: string;\n};\n\nexport const TextFieldRoot = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, TextFieldProps>\n) => {\n  const [local, rest] = splitProps(props as TextFieldProps, [\"class\"]);\n\n  return <TextFieldPrimitive.Root class={cn(\"space-y-1\", local.class)} {...rest} />;\n};\n\nconst textfieldLabel = cva(\"text-sm data-[disabled]:(cursor-not-allowed opacity-70) font-medium\", {\n  variants: {\n    label: {\n      true: \"data-[invalid]:text-destructive\"\n    },\n    error: {\n      true: \"text-destructive\"\n    },\n    description: {\n      true: \"font-normal text-muted-foreground\"\n    }\n  },\n  defaultVariants: {\n    label: true\n  }\n});\n\ntype TextFieldLabelProps = TextFieldPrimitive.TextFieldLabelProps & {\n  class?: string;\n};\n\nexport const TextFieldLabel = <T extends ValidComponent = \"label\">(\n  props: PolymorphicProps<T, TextFieldLabelProps>\n) => {\n  const [local, rest] = splitProps(props as TextFieldLabelProps, [\"class\"]);\n\n  return <TextFieldPrimitive.Label class={cn(textfieldLabel(), local.class)} {...rest} />;\n};\n\ntype TextFieldErrorMessageProps = TextFieldPrimitive.TextFieldErrorMessageProps & {\n  class?: string;\n};\n\nexport const TextFieldErrorMessage = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, TextFieldErrorMessageProps>\n) => {\n  const [local, rest] = splitProps(props as TextFieldErrorMessageProps, [\"class\"]);\n\n  return (\n    <TextFieldPrimitive.ErrorMessage\n      class={cn(textfieldLabel({ error: true }), local.class)}\n      {...rest}\n    />\n  );\n};\n\ntype TextFieldDescriptionProps = TextFieldPrimitive.TextFieldDescriptionProps & {\n  class?: string;\n};\n\nexport const TextFieldDescription = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, TextFieldDescriptionProps>\n) => {\n  const [local, rest] = splitProps(props as TextFieldDescriptionProps, [\"class\"]);\n\n  return (\n    <TextFieldPrimitive.Description\n      class={cn(textfieldLabel({ description: true }), local.class)}\n      {...rest}\n    />\n  );\n};\n\ntype TextFieldInputProps = VoidProps<\n  TextFieldPrimitive.TextFieldDescriptionProps & {\n    class?: string;\n  }\n>;\n\nexport const TextField = <T extends ValidComponent = \"input\">(\n  props: PolymorphicProps<T, TextFieldInputProps>\n) => {\n  const [local, rest] = splitProps(props as TextFieldInputProps, [\"class\"]);\n\n  return (\n    <TextFieldPrimitive.Input\n      class={cn(\n        \"flex h-9 w-full rounded-md border border-input bg-inherit px-3 py-1 text-sm shadow-sm file:(border-0 bg-transparent text-sm font-medium) placeholder:text-muted-foreground focus-visible:(outline-none ring-1.5 ring-ring) disabled:(cursor-not-allowed opacity-50) transition-shadow\",\n        local.class\n      )}\n      {...rest}\n    />\n  );\n};\n"
    }
  ],
  "type": "components:ui"
}