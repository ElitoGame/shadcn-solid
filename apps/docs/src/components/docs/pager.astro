---
import { docsConfig } from "@/config"
import type { TNavItem, TNavItemWithChildren } from "@/types"
import { buttonVariants } from "../ui"

const getPagerForDoc = (slug: string | undefined) => {
	const flattenedLinks = [null, ...flatten(docsConfig.sidebarNav), null]
	let activeIndex: number
	if (!slug) {
		activeIndex = 1
	} else {
		activeIndex = flattenedLinks.findIndex(
			(link) => `/docs/${slug}` === link?.href
		)
	}

	const prev = activeIndex !== 0 ? flattenedLinks[activeIndex - 1] : null
	const next =
		activeIndex !== flattenedLinks.length - 1
			? flattenedLinks[activeIndex + 1]
			: null
	return {
		prev,
		next,
	}
}

const flatten = (links: TNavItemWithChildren[]): TNavItem[] => {
	return links
		.reduce<TNavItem[]>((flat, link) => {
			return flat.concat(link.items?.length ? flatten(link.items) : link)
		}, [])
		.filter((link) => !link?.disabled)
}

type Props = {
	slug?: string
}

const { slug } = Astro.props

const page = getPagerForDoc(slug)
---

<div class="flex flex-row items-center justify-between">
	{
		page?.prev?.href ? (
			<a
				href={page.prev.href}
				class={buttonVariants({ variant: "outline" })}
			>
				<i class="i-lucide:chevron-left mr-2" />
				{page.prev.title}
			</a>
		) : null
	}
	{
		page?.next?.href ? (
			<a
				href={page.next.href}
				class={buttonVariants({ variant: "outline" })}
			>
				{page.next.title}
				<i class="i-lucide:chevron-right ml-2" />
			</a>
		) : null
	}
</div>
