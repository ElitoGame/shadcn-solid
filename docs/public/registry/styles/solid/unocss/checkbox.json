{
  "name": "checkbox",
  "dependencies": [
    "@kobalte/core"
  ],
  "files": [
    {
      "name": "checkbox.tsx",
      "content": "import { cn } from \"@/libs/cn\";\nimport type {\n\tCheckboxControlProps,\n\tCheckboxDescriptionProps,\n\tCheckboxErrorMessageProps,\n\tCheckboxLabelProps,\n\tCheckboxRootProps,\n} from \"@kobalte/core/checkbox\";\nimport { Checkbox as CheckboxPrimitive } from \"@kobalte/core/checkbox\";\nimport type { PolymorphicProps } from \"@kobalte/core/polymorphic\";\nimport type { JSXElement, ValidComponent, VoidProps } from \"solid-js\";\nimport { Match, Switch, splitProps } from \"solid-js\";\n\nexport type checkboxProps<T extends ValidComponent = \"div\"> =\n\tCheckboxRootProps<T> & {\n\t\tclass?: string;\n\t};\n\nexport const Checkbox = <T extends ValidComponent = \"div\">(\n\tprops: PolymorphicProps<T, checkboxProps<T>>,\n) => {\n\tconst [local, rest] = splitProps(props as checkboxProps, [\"class\"]);\n\n\treturn (\n\t\t<CheckboxPrimitive class={cn(\"flex gap-x-2\", local.class)} {...rest} />\n\t);\n};\n\nexport type checkboxLabelProps<T extends ValidComponent = \"label\"> =\n\tCheckboxLabelProps<T> & {\n\t\tclass?: string;\n\t};\n\nexport const CheckboxLabel = <T extends ValidComponent = \"label\">(\n\tprops: PolymorphicProps<T, checkboxLabelProps<T>>,\n) => {\n\tconst [local, rest] = splitProps(props as checkboxLabelProps, [\"class\"]);\n\n\treturn (\n\t\t<CheckboxPrimitive.Label\n\t\t\tclass={cn(\"text-sm font-medium select-none\", local.class)}\n\t\t\t{...rest}\n\t\t/>\n\t);\n};\n\nexport type checkboxDescriptionProps<T extends ValidComponent = \"div\"> =\n\tCheckboxDescriptionProps<T> & {\n\t\tclass?: string;\n\t};\n\nexport const CheckboxDescription = <T extends ValidComponent = \"div\">(\n\tprops: PolymorphicProps<T, checkboxDescriptionProps<T>>,\n) => {\n\tconst [local, rest] = splitProps(props as checkboxDescriptionProps, [\n\t\t\"class\",\n\t]);\n\n\treturn (\n\t\t<CheckboxPrimitive.Description\n\t\t\tclass={cn(\"text-sm/6 text-muted-foreground select-none\", local.class)}\n\t\t\t{...rest}\n\t\t/>\n\t);\n};\n\nexport type checkboxErrorMessageProps<T extends ValidComponent = \"div\"> =\n\tCheckboxErrorMessageProps<T> & {\n\t\tclass?: string;\n\t};\n\nexport const CheckboxErrorMessage = <T extends ValidComponent = \"div\">(\n\tprops: PolymorphicProps<T, checkboxErrorMessageProps<T>>,\n) => {\n\tconst [local, rest] = splitProps(props as checkboxErrorMessageProps, [\n\t\t\"class\",\n\t]);\n\n\treturn (\n\t\t<CheckboxPrimitive.ErrorMessage\n\t\t\tclass={cn(\"text-xs/6 text-red-500 font-medium\", local.class)}\n\t\t\t{...rest}\n\t\t/>\n\t);\n};\n\nexport type checkboxControlProps<T extends ValidComponent = \"div\"> = VoidProps<\n\tCheckboxControlProps<T> & {\n\t\tclass?: string;\n\t\ticon?: JSXElement;\n\t\tindeterminate?: boolean;\n\t}\n>;\n\nexport const CheckboxControl = <T extends ValidComponent = \"div\">(\n\tprops: PolymorphicProps<T, checkboxControlProps<T>>,\n) => {\n\tconst [local, rest] = splitProps(props as checkboxControlProps, [\n\t\t\"class\",\n\t\t\"icon\",\n\t\t\"indeterminate\",\n\t]);\n\n\treturn (\n\t\t<div class=\"flex items-start mt-.6\">\n\t\t\t<CheckboxPrimitive.Input class=\"peer\" />\n\t\t\t<CheckboxPrimitive.Control\n\t\t\t\tclass={cn(\n\t\t\t\t\t\"[--checkbox-control-border:theme(colors.zinc.300)] [--checkbox-control-bg:theme(colors.zinc.50)] [--checkbox-control-text:theme(colors.white)]\",\n\t\t\t\t\t\"peer-focus-visible:(outline-none ring-4 ring-blue-200 [--checkbox-control-border:theme(colors.blue.500)])\",\n\t\t\t\t\t\"peer-hover:[--checkbox-control-bg:theme(colors.zinc.200)] hover:[--checkbox-control-bg:theme(colors.zinc.200)]\",\n\t\t\t\t\t\"has-[[data-checked],[data-indeterminate]]:([--checkbox-control-bg:theme(colors.blue.500)] peer-hover:[--checkbox-control-bg:theme(colors.blue.500)] hover:[--checkbox-control-bg:theme(colors.blue.500)] border-[--checkbox-control-bg])\",\n\t\t\t\t\t\"data-[invalid]:([--checkbox-control-bg:theme(colors.red.100)] [--checkbox-control-border:theme(colors.red.400)] peer-hover:[--checkbox-control-bg:theme(colors.red.300)] hover:[--checkbox-control-bg:theme(colors.red.300)]) data-[invalid]:peer-focus-visible:(ring-red-200 [--checkbox-control-border:theme(colors.red.500)])\",\n\t\t\t\t\t\"has-[[data-checked][data-invalid]]:([--checkbox-control-bg:theme(colors.red.500)] peer-hover:[--checkbox-control-bg:theme(colors.red.500)] hover:[--checkbox-control-bg:theme(colors.red.500)])\",\n\t\t\t\t\t\"size-4 shrink-0 rounded-sm transition-[box-shadow,border-color,background-color,color] duration-300 border border-[--checkbox-control-border] bg-[--checkbox-control-bg] text-[--checkbox-control-text]\",\n\t\t\t\t\tlocal.class,\n\t\t\t\t)}\n\t\t\t\t{...rest}\n\t\t\t>\n\t\t\t\t<CheckboxPrimitive.Indicator\n\t\t\t\t\tclass=\"flex items-center justify-center size-full [&>svg]:(animate-in zoom-in fade-in-0 animate-duration-300)\"\n\t\t\t\t\tforceMount={local.indeterminate}\n\t\t\t\t>\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Match when={!local.icon && !local.indeterminate}>\n\t\t\t\t\t\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n\t\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\t\t\t\t\td=\"m5 12l5 5L20 7\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<title>Checked</title>\n\t\t\t\t\t\t\t</svg>\n\t\t\t\t\t\t</Match>\n\t\t\t\t\t\t<Match when={local.icon && !local.indeterminate}>\n\t\t\t\t\t\t\t{local.icon}\n\t\t\t\t\t\t</Match>\n\t\t\t\t\t\t<Match when={local.indeterminate}>\n\t\t\t\t\t\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n\t\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\t\t\t\t\td=\"M5 12h14\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<title>Indeterminate</title>\n\t\t\t\t\t\t\t</svg>\n\t\t\t\t\t\t</Match>\n\t\t\t\t\t</Switch>\n\t\t\t\t</CheckboxPrimitive.Indicator>\n\t\t\t</CheckboxPrimitive.Control>\n\t\t</div>\n\t);\n};\n"
    }
  ],
  "type": "components:ui"
}