{
	"name": "carousel",
	"dependencies": ["embla-carousel-solid"],
	"registryDependencies": ["button"],
	"files": [
		{
			"name": "carousel.tsx",
			"content": "import { cn } from \"@/libs/cn\";\r\nimport type { CreateEmblaCarouselType } from \"embla-carousel-solid\";\r\nimport createEmblaCarousel from \"embla-carousel-solid\";\r\nimport type {\r\n\tAccessor,\r\n\tComponentProps,\r\n\tParentProps,\r\n\tVoidProps,\r\n} from \"solid-js\";\r\nimport {\r\n\tcreateContext,\r\n\tcreateEffect,\r\n\tcreateMemo,\r\n\tcreateSignal,\r\n\tmergeProps,\r\n\tonCleanup,\r\n\tsplitProps,\r\n\tuseContext,\r\n} from \"solid-js\";\r\nimport { Button } from \"./button\";\r\n\r\nexport type CarouselApi = CreateEmblaCarouselType[1];\r\ntype UseCarouselParameters = Parameters<typeof createEmblaCarousel>;\r\ntype CarouselOptions = NonNullable<UseCarouselParameters[0]>;\r\ntype CarouselPlugin = NonNullable<UseCarouselParameters[1]>;\r\n\r\ntype CarouselProps = {\r\n\topts?: ReturnType<CarouselOptions>;\r\n\tplugins?: ReturnType<CarouselPlugin>;\r\n\torientation?: \"horizontal\" | \"vertical\";\r\n\tsetApi?: (api: CarouselApi) => void;\r\n};\r\n\r\ntype CarouselContextProps = {\r\n\tcarouselRef: ReturnType<typeof createEmblaCarousel>[0];\r\n\tapi: ReturnType<typeof createEmblaCarousel>[1];\r\n\tscrollPrev: () => void;\r\n\tscrollNext: () => void;\r\n\tcanScrollPrev: Accessor<boolean>;\r\n\tcanScrollNext: Accessor<boolean>;\r\n} & CarouselProps;\r\n\r\nconst CarouselContext = createContext<Accessor<CarouselContextProps> | null>(\r\n\tnull,\r\n);\r\n\r\nconst useCarousel = () => {\r\n\tconst context = useContext(CarouselContext);\r\n\r\n\tif (!context) {\r\n\t\tthrow new Error(\"useCarousel must be used within a <Carousel />\");\r\n\t}\r\n\r\n\treturn context();\r\n};\r\n\r\nexport const Carousel = (props: ComponentProps<\"div\"> & CarouselProps) => {\r\n\tconst merge = mergeProps<\r\n\t\tParentProps<ComponentProps<\"div\"> & CarouselProps>[]\r\n\t>({ orientation: \"horizontal\" }, props);\r\n\r\n\tconst [local, rest] = splitProps(merge, [\r\n\t\t\"orientation\",\r\n\t\t\"opts\",\r\n\t\t\"setApi\",\r\n\t\t\"plugins\",\r\n\t\t\"class\",\r\n\t\t\"children\",\r\n\t]);\r\n\r\n\tconst [carouselRef, api] = createEmblaCarousel(\r\n\t\t() => ({\r\n\t\t\t...local.opts,\r\n\t\t\taxis: local.orientation === \"horizontal\" ? \"x\" : \"y\",\r\n\t\t}),\r\n\t\t() => (local.plugins === undefined ? [] : local.plugins),\r\n\t);\r\n\tconst [canScrollPrev, setCanScrollPrev] = createSignal(false);\r\n\tconst [canScrollNext, setCanScrollNext] = createSignal(false);\r\n\r\n\tconst onSelect = (api: NonNullable<ReturnType<CarouselApi>>) => {\r\n\t\tsetCanScrollPrev(api.canScrollPrev());\r\n\t\tsetCanScrollNext(api.canScrollNext());\r\n\t};\r\n\r\n\tconst scrollPrev = () => api()?.scrollPrev();\r\n\r\n\tconst scrollNext = () => api()?.scrollNext();\r\n\r\n\tconst handleKeyDown = (event: KeyboardEvent) => {\r\n\t\tif (event.key === \"ArrowLeft\") {\r\n\t\t\tevent.preventDefault();\r\n\t\t\tscrollPrev();\r\n\t\t} else if (event.key === \"ArrowRight\") {\r\n\t\t\tevent.preventDefault();\r\n\t\t\tscrollNext();\r\n\t\t}\r\n\t};\r\n\r\n\tcreateEffect(() => {\r\n\t\tif (!api() || !local.setApi) return;\r\n\r\n\t\tlocal.setApi(api);\r\n\t});\r\n\r\n\tcreateEffect(() => {\r\n\t\tconst _api = api();\r\n\t\tif (_api === undefined) return;\r\n\r\n\t\tonSelect(_api);\r\n\t\t_api.on(\"reInit\", onSelect);\r\n\t\t_api.on(\"select\", onSelect);\r\n\r\n\t\tonCleanup(() => {\r\n\t\t\t_api.off(\"select\", onSelect);\r\n\t\t});\r\n\t});\r\n\r\n\tconst value = createMemo(\r\n\t\t() =>\r\n\t\t\t({\r\n\t\t\t\tcarouselRef,\r\n\t\t\t\tapi,\r\n\t\t\t\topts: local.opts,\r\n\t\t\t\torientation:\r\n\t\t\t\t\tlocal.orientation ||\r\n\t\t\t\t\t(local.opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\r\n\t\t\t\tscrollPrev,\r\n\t\t\t\tscrollNext,\r\n\t\t\t\tcanScrollPrev,\r\n\t\t\t\tcanScrollNext,\r\n\t\t\t}) satisfies CarouselContextProps,\r\n\t);\r\n\r\n\treturn (\r\n\t\t<CarouselContext.Provider value={value}>\r\n\t\t\t<div\r\n\t\t\t\tonKeyDown={handleKeyDown}\r\n\t\t\t\tclass={cn(\"relative\", local.class)}\r\n\t\t\t\trole=\"region\"\r\n\t\t\t\taria-roledescription=\"carousel\"\r\n\t\t\t\t{...rest}\r\n\t\t\t>\r\n\t\t\t\t{local.children}\r\n\t\t\t</div>\r\n\t\t</CarouselContext.Provider>\r\n\t);\r\n};\r\n\r\nexport const CarouselContent = (props: ComponentProps<\"div\">) => {\r\n\tconst [local, rest] = splitProps(props, [\"class\"]);\r\n\tconst { carouselRef, orientation } = useCarousel();\r\n\r\n\treturn (\r\n\t\t<div ref={carouselRef} class=\"overflow-hidden\">\r\n\t\t\t<div\r\n\t\t\t\tclass={cn(\r\n\t\t\t\t\t\"flex\",\r\n\t\t\t\t\torientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\r\n\t\t\t\t\tlocal.class,\r\n\t\t\t\t)}\r\n\t\t\t\t{...rest}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport const CarouselItem = (props: ComponentProps<\"div\">) => {\r\n\tconst [local, rest] = splitProps(props, [\"class\"]);\r\n\tconst { orientation } = useCarousel();\r\n\r\n\treturn (\r\n\t\t<div\r\n\t\t\trole=\"group\"\r\n\t\t\taria-roledescription=\"slide\"\r\n\t\t\tclass={cn(\r\n\t\t\t\t\"min-w-0 shrink-0 grow-0 basis-full\",\r\n\t\t\t\torientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\r\n\t\t\t\tlocal.class,\r\n\t\t\t)}\r\n\t\t\t{...rest}\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nexport const CarouselPrevious = (\r\n\tprops: VoidProps<ComponentProps<typeof Button>>,\r\n) => {\r\n\tconst merge = mergeProps<VoidProps<ComponentProps<typeof Button>[]>>(\r\n\t\t{ variant: \"outline\", size: \"icon\" },\r\n\t\tprops,\r\n\t);\r\n\tconst [local, rest] = splitProps(merge, [\"class\", \"variant\", \"size\"]);\r\n\tconst { orientation, scrollPrev, canScrollPrev } = useCarousel();\r\n\r\n\treturn (\r\n\t\t<Button\r\n\t\t\tvariant={local.variant}\r\n\t\t\tsize={local.size}\r\n\t\t\tclass={cn(\r\n\t\t\t\t\"absolute  h-8 w-8 rounded-full touch-manipulation\",\r\n\t\t\t\torientation === \"horizontal\"\r\n\t\t\t\t\t? \"-left-12 top-1/2 -translate-y-1/2\"\r\n\t\t\t\t\t: \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\r\n\t\t\t\tlocal.class,\r\n\t\t\t)}\r\n\t\t\tdisabled={!canScrollPrev()}\r\n\t\t\tonClick={scrollPrev}\r\n\t\t\t{...rest}\r\n\t\t>\r\n\t\t\t<svg\r\n\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\r\n\t\t\t\tviewBox=\"0 0 24 24\"\r\n\t\t\t\tclass=\"size-4\"\r\n\t\t\t>\r\n\t\t\t\t<path\r\n\t\t\t\t\tfill=\"none\"\r\n\t\t\t\t\tstroke=\"currentColor\"\r\n\t\t\t\t\tstroke-linecap=\"round\"\r\n\t\t\t\t\tstroke-linejoin=\"round\"\r\n\t\t\t\t\tstroke-width=\"2\"\r\n\t\t\t\t\td=\"M5 12h14M5 12l6 6m-6-6l6-6\"\r\n\t\t\t\t/>\r\n\t\t\t\t<title>Previous slide</title>\r\n\t\t\t</svg>\r\n\t\t</Button>\r\n\t);\r\n};\r\n\r\nexport const CarouselNext = (\r\n\tprops: VoidProps<ComponentProps<typeof Button>>,\r\n) => {\r\n\tconst merge = mergeProps<VoidProps<ComponentProps<typeof Button>[]>>(\r\n\t\t{ variant: \"outline\", size: \"icon\" },\r\n\t\tprops,\r\n\t);\r\n\tconst [local, rest] = splitProps(merge, [\"class\", \"variant\", \"size\"]);\r\n\tconst { orientation, scrollNext, canScrollNext } = useCarousel();\r\n\r\n\treturn (\r\n\t\t<Button\r\n\t\t\tvariant={local.variant}\r\n\t\t\tsize={local.size}\r\n\t\t\tclass={cn(\r\n\t\t\t\t\"absolute h-8 w-8 rounded-full touch-manipulation\",\r\n\t\t\t\torientation === \"horizontal\"\r\n\t\t\t\t\t? \"-right-12 top-1/2 -translate-y-1/2\"\r\n\t\t\t\t\t: \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\r\n\t\t\t\tlocal.class,\r\n\t\t\t)}\r\n\t\t\tdisabled={!canScrollNext()}\r\n\t\t\tonClick={scrollNext}\r\n\t\t\t{...rest}\r\n\t\t>\r\n\t\t\t<svg\r\n\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\r\n\t\t\t\tviewBox=\"0 0 24 24\"\r\n\t\t\t\tclass=\"size-4\"\r\n\t\t\t>\r\n\t\t\t\t<path\r\n\t\t\t\t\tfill=\"none\"\r\n\t\t\t\t\tstroke=\"currentColor\"\r\n\t\t\t\t\tstroke-linecap=\"round\"\r\n\t\t\t\t\tstroke-linejoin=\"round\"\r\n\t\t\t\t\tstroke-width=\"2\"\r\n\t\t\t\t\td=\"M5 12h14m-4 4l4-4m-4-4l4 4\"\r\n\t\t\t\t/>\r\n\t\t\t\t<title>Next slide</title>\r\n\t\t\t</svg>\r\n\t\t</Button>\r\n\t);\r\n};\r\n"
		}
	],
	"type": "components:ui"
}
