{
	"name": "otp-field",
	"dependencies": ["@corvu/otp-field"],
	"files": [
		{
			"name": "otp-field.tsx",
			"content": "import { cn } from \"@/libs/cn\";\r\nimport type { DynamicProps, RootProps } from \"@corvu/otp-field\";\r\nimport OTPFieldPrimitive from \"@corvu/otp-field\";\r\nimport type { ComponentProps, ValidComponent } from \"solid-js\";\r\nimport { Show, splitProps } from \"solid-js\";\r\n\r\nexport const OTPFieldInput = OTPFieldPrimitive.Input;\r\n\r\ntype OTPFieldProps<T extends ValidComponent = \"div\"> = RootProps<T> & {\r\n\tclass?: string;\r\n};\r\n\r\nexport const OTPField = <T extends ValidComponent = \"div\">(\r\n\tprops: DynamicProps<T, OTPFieldProps<T>>,\r\n) => {\r\n\tconst [local, rest] = splitProps(props, [\"class\"]);\r\n\r\n\treturn (\r\n\t\t<OTPFieldPrimitive\r\n\t\t\tclass={cn(\r\n\t\t\t\t\"flex items-center gap-2 has-[:disabled]:opacity-50\",\r\n\t\t\t\tlocal.class,\r\n\t\t\t)}\r\n\t\t\t{...rest}\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nexport const OTPFieldGroup = (props: ComponentProps<\"div\">) => {\r\n\tconst [local, rest] = splitProps(props, [\"class\"]);\r\n\r\n\treturn <div class={cn(\"flex items-center\", local.class)} {...rest} />;\r\n};\r\n\r\nexport const OTPFieldSeparator = (props: ComponentProps<\"div\">) => {\r\n\treturn (\r\n\t\t// biome-ignore lint/a11y/useAriaPropsForRole: []\r\n\t\t<div role=\"separator\" {...props}>\r\n\t\t\t<svg\r\n\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\r\n\t\t\t\tclass=\"size-4\"\r\n\t\t\t\tviewBox=\"0 0 15 15\"\r\n\t\t\t>\r\n\t\t\t\t<title>Separator</title>\r\n\t\t\t\t<path\r\n\t\t\t\t\tfill=\"currentColor\"\r\n\t\t\t\t\tfill-rule=\"evenodd\"\r\n\t\t\t\t\td=\"M5 7.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 0 1h-4a.5.5 0 0 1-.5-.5\"\r\n\t\t\t\t\tclip-rule=\"evenodd\"\r\n\t\t\t\t/>\r\n\t\t\t</svg>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport const OTPFieldSlot = (\r\n\tprops: ComponentProps<\"div\"> & { index: number },\r\n) => {\r\n\tconst [local, rest] = splitProps(props, [\"class\", \"index\"]);\r\n\tconst context = OTPFieldPrimitive.useContext();\r\n\tconst char = () => context.value()[local.index];\r\n\tconst hasFakeCaret = () =>\r\n\t\tcontext.value().length === local.index && context.isInserting();\r\n\tconst isActive = () => context.activeSlots().includes(local.index);\r\n\r\n\treturn (\r\n\t\t<div\r\n\t\t\tclass={cn(\r\n\t\t\t\t\"relative flex size-9 items-center justify-center border-y border-r border-input text-sm shadow-sm transition-shadow first:rounded-l-md first:border-l last:rounded-r-md\",\r\n\t\t\t\tisActive() && \"z-10 ring-[1.5px] ring-ring\",\r\n\t\t\t\tlocal.class,\r\n\t\t\t)}\r\n\t\t\t{...rest}\r\n\t\t>\r\n\t\t\t{char()}\r\n\t\t\t<Show when={hasFakeCaret()}>\r\n\t\t\t\t<div class=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\r\n\t\t\t\t\t<div class=\"h-4 w-px animate-caret-blink bg-foreground\" />\r\n\t\t\t\t</div>\r\n\t\t\t</Show>\r\n\t\t</div>\r\n\t);\r\n};\r\n"
		}
	],
	"type": "components:ui"
}
